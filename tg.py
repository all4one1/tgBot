import telebot
import os
import tools
import sql
import urllib.request
from telebot import types


TOKEN = tools.get_token()
bot = telebot.TeleBot(TOKEN, parse_mode="HTML")

tools.init()
userlist = sql.get_user_id_list()

print("bot started")
bot_info = bot.get_me()


@bot.message_handler(commands=["debug"])
def response(message):
    user = message.from_user
    id = user.id
    res = str(list(sql.get_data(id)))
    s = ' '.join((res))
    bot.reply_to(message, s)

@bot.message_handler(commands=["check"])
def response(message):
    bot.reply_to(message, "–ë–æ—Ç –≤–∫–ª—é—á–µ–Ω")


@bot.message_handler(commands=["start"])
def beginning(message):
    user = message.from_user
    id = user.id
    
    markup = types.ReplyKeyboardMarkup(resize_keyboard = True)
    button_next = types.KeyboardButton("‚è© –î–∞–ª–µ–µ")
    button_menu = types.KeyboardButton("üìò –ú–µ–Ω—é")
    markup.add(button_menu, button_next)
 
    if user.language_code == "ru":
        bot.send_message(id, "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π, –¥–æ—Ä–æ–≥–æ–π –¥—Ä—É–≥", reply_markup=markup)
    else:
        bot.send_message(id, "Hello, dear friend", reply_markup=markup)    
    
    folder = os.path.join("User",str(id))
    if not os.path.exists(folder):
        os.makedirs(folder)
    
    isNew = not (id in userlist)
    if isNew == True:
        sql.add_new_user(id)
        userlist.append(id)
        tools.log("user " + str(id) + " has been created")
        
        f = open((os.path.join(folder,"userinfo.txt")),"w")
        f.write("First name: " + str(user.first_name) + "\n")
        f.write("Last name: " + str(user.last_name)+ "\n")
        f.write("username: " + str(user.username)+ "\n")  
        f.close()
        

@bot.message_handler(commands=["next"])
def next_page(message):
    user = message.from_user
    id = user.id
    if user_not_found(user, id):
        return

    isOpen, pos, shift, freq = sql.get_data(id)
    if isOpen == 0:
        if user.language_code == "ru":
            bot.send_message(id, "–§–∞–π–ª–∞ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–Ω–æ–≤–∞")
        else:
            bot.send_message(id, "File not found. Please, try uploading again")  
        return
    
    path = tools.get_current_path(id)
    book = tools.get_book(path)
    
    size_N = len(book)
    if pos > size_N:
        if user.language_code == "ru":
            bot.send_message(id, "–¢–µ–∫—Å—Ç –∑–∞–∫–æ–Ω—á–∏–ª—Å—è")
        else:
            bot.send_message(id, "Text is over")  
        return       
    
    end_pos = pos + shift
    pages_read = tools.how_much_read(end_pos, size_N, shift)
    
    text = book[pos: end_pos] + "\n" + pages_read
    bot.send_message(id, text)
    sql.update(id = id, field = "position", value = end_pos)

@bot.message_handler(content_types=["document"])
def obtained(message):
    user = message.from_user
    id = user.id
    
    isNew = not (id in userlist)
    if isNew == True:
        bot.send_message(id, "Error, you have not /started")
        
        
    #bot.reply_to(message, message.document)
    doc = message.document
    file = bot.get_file(doc.file_id)
    link = 'https://api.telegram.org/file/bot'+TOKEN+'/'+ file.file_path
    file_name = str(doc.file_name)
    current_path = tools.get_current_path(id)
    response = urllib.request.urlretrieve(link, current_path)
    f = open(current_path, "r")
    if f.readable() == True:
        bot.reply_to(message, "file has been received")
        sql.update(id = id, field = 'isOpen', value = 1)
        sql.update(id = id, field = 'position', value = 0)
   
@bot.message_handler(commands=["help"])
def get_help(message, language_code = 'ru'):
    id = message.chat.id
    #if language_code == 'ru':
    text = '''–≠—Ç–æ –±–æ—Ç. –ë–æ—Ç-—á–∏—Ç–∞–ª–∫–∞. –°–∞–º –∑–∞ —Ç–µ–±—è —á–∏—Ç–∞—Ç—å –æ–Ω –Ω–µ –±—É–¥–µ—Ç. –§–æ—Ä–º–∞—Ç-–∞—É–¥–∏–æ –∫–Ω–∏–≥ —ç—Ç–æ –≤ –¥—Ä—É–≥–æ–µ –º–µ—Å—Ç–æ. 
–ò–¥–µ—è –¥–∞–Ω–Ω–æ–≥–æ –±–æ—Ç–∞ - —á–∏—Ç–∞—Ç—å —Å–∞–º–æ–º—É. –°–∞–º —á–∏—Ç–∞–µ—à—å - –≥–ª—É–±–∂–µ –≤—Å–µ –ø–æ–Ω–∏–º–∞–µ—à—å. –ï—Å—Ç—å –∫–∞–∫–∏–µ-—Ç–æ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è, —á—Ç–æ —á–∏—Ç–∞—Ç—å –±–æ–ª—å—à–∏–µ –∫–Ω–∏–≥–∏ - —Ç—è–∂–µ–ª–æ. –ù–æ –∫–æ–≥–¥–∞ –∫–Ω–∏–∂–∫–∞ —Ä–∞–∑–±–∏—Ç–∞ –Ω–∞ –º–µ–ª–∫–∏–µ —Ñ—Ä–∞–≥–º–µ—Ç—ã - —Ç–æ—Ç –∂–µ —Å–∞–º—ã–π –æ–±—ä–µ–º —Ç–µ–∫—Å—Ç–∞ –ø–æ —á–∞—Å—Ç—è–º "–ø–æ–≥–ª–æ—â–∞–µ—Ç—Å—è" –≤ —Ä–∞–∑—ã –±—ã—Å—Ç—Ä–µ–µ. 
–ê –µ—â–µ, –≤ —Ç–µ–ª–µ–≥—Ä–∞–º –º–Ω–æ–≥–∏–µ –∑–∞—Ö–æ–¥—è—Ç –ø–æ –≤—Å—è–∫–æ–π –µ—Ä—É–Ω–¥–µ, –ª–∏—Å—Ç–∞—è (–ø–æ –±–æ–ª—å—à–æ–º—É —Å—á–µ—Ç—É) –±–µ—Å–ø–æ–ª–µ–∑–Ω—É—é –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—É—é –ª–µ–Ω—Ç—É. –ê —Ç–∞–∫ –≥–ª—è–¥–∏—à—å –∏ –∫–Ω–∏–∂–∫—É –∫–∞–∫—É—é —É–º–Ω—É—é –º–∏–º–æ —Ö–æ–¥–æ–º –æ—Å–∏–ª–∏—à—å (–ø—É—Å–∫–∞–π –∏ –Ω–µ –±—ã—Å—Ç—Ä–æ).
–ï—Å–ª–∏ –≤—ã –µ—â–µ —Ç–æ–≥–æ –Ω–µ —Å–¥–µ–ª–∞–ª–∏, –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ó–∞—Ç–µ–º –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª –≤ —Ñ–æ—Ä–º–∞—Ç–µ *.txt.
–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–î–∞–ª–µ–µ" –¥–ª—è –ø–µ—Ä–µ–ª–∏—Å—Ç—ã–≤–∞–Ω–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü. –í –º–µ–Ω—é –º–æ–∂–Ω–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å —Ä–∞–∑–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã, –Ω–æ –Ω–µ –±–æ–ª–µ–µ 4000 —Å–∏–º–≤–æ–ª–æ–≤ (–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –¢–µ–ª–µ–≥—Ä–∞–º–∞)
–í—Å–µ –ø—Ä–µ—Ç–µ–Ω–∑–∏–∏ –ø—Ä–∏—Å—ã–ª–∞–π—Ç–µ –Ω–∞ –∞–¥—Ä–µ—Å: ¬´–°–ø–æ—Ä—Ç–ª–æ—Ç–æ¬ª: 109316, –ú–æ—Å–∫–≤–∞, –í–æ–ª–≥–æ–≥—Ä–∞–¥—Å–∫–∏–π –ø—Ä–æ—Å–ø–µ–∫—Ç, –¥. 43, –∫–æ—Ä–ø. 3
'''
    bot.send_message(id, text)

@bot.message_handler(content_types=["text"])
def inline_buttons(message):
    user = message.from_user
    id = user.id 
    if user_not_found(user, id):
        return
    isOpen, pos, shift, freq = sql.get_data(id)    

    my_text = message.text
    split_text = my_text.split(" ")
    
    menu_list = ["–ú–µ–Ω—é", "–º–µ–Ω—é", "Menu", "menu"]
    if any(x in split_text for x in menu_list):
        imarkup = types.InlineKeyboardMarkup(row_width=1)
        b1 = types.InlineKeyboardButton("–ù–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã", callback_data = "page_number")
        b2 = types.InlineKeyboardButton("–†–∞–∑–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã", callback_data = "page_size")
        b3 = types.InlineKeyboardButton("–ù–∞–π—Ç–∏ —Ñ—Ä–∞–∑—É", callback_data = "find_phrase")
        b4 = types.InlineKeyboardButton("–ü—Ä–æ—á–∏—Ç–∞–Ω–æ", callback_data = "state")
        b5 = types.InlineKeyboardButton("–ü–æ–º–æ—â—å", callback_data = "help")
        imarkup.add(b1,b2,b3,b4,b5)
        bot.send_message(id,"–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —á–∏—Ç–∞–ª–∫–∏", parse_mode='HTML', reply_markup=imarkup)

    next_list = ["–î–∞–ª–µ–µ", "–¥–∞–ª–µ–µ", "Next", "next"] 
    if any(x in split_text for x in next_list):
        next_page(message)
        
@bot.callback_query_handler(func=lambda call: True)
def callback_handler(call):
    id = call.message.chat.id
    mes = call.message
    language_code = call.from_user.language_code
    
    
    if call.data == 'page_number':
        bot.send_message(id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã")
        bot.register_next_step_handler(mes, set_page_number)
    if call.data == 'page_size':
        bot.send_message(id, "–í–≤–µ–¥–∏ —Ä–∞–∑–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã –≤ —Å–∏–º–≤–æ–ª–∞—Ö, –Ω–µ –±–æ–ª–µ–µ 4000")
        bot.register_next_step_handler(mes, set_page_size)
    if call.data == 'find_phrase':
        bot.send_message(id, "–í–≤–µ–¥–∏—Ç–µ –∏—Å–∫–æ–º—É—é —Ñ—Ä–∞–∑—É")
        bot.register_next_step_handler(mes, set_page_by_phrase)     
    if call.data == "state":
        show_state(mes)    
    if call.data == "help":
        get_help(mes)

def set_page_number(message):
    id = message.chat.id   
    isOpen, pos, shift, freq = sql.get_data(id)
    if isOpen == 1:     
        n = tools.to_int(message.text)
        if n == -1:
            bot.send_message(message.chat.id, "–í—ã –≤–≤–µ–ª–∏ —Ö—É–π–Ω—é")
        else:
            pos = (n) * shift
            sql.update(id = id, field = "position", value = pos)
            path = tools.get_current_path(id)
            book = tools.get_book(path)
            size_N = len(book)
            text = "–°—Ç—Ä–∞–Ω–∏—Ü–∞: " +  tools.how_much_read(pos, size_N, shift)
            bot.send_message(id, text)                       

def set_page_size(message):
    id = message.chat.id
    isOpen, pos, shift, freq = sql.get_data(id)
    n = tools.to_int(message.text)

    if n == -1:
        bot.send_message(message.chat.id, "–•—É–ª–∏ —Ç—ã –≤–≤–æ–¥–∏—à—å")
    elif n > 4000:
        bot.send_message(message.chat.id, "–¢—ã —Ç—É–ø–æ–π?")        
    elif n < 20:
        bot.send_message(message.chat.id, "–•–∞-—Ö–∞-—Ö–∞, –∫–∞–∫ —Å–º–µ—à–Ω–æ")
    else:
        sql.update(id = id, field = "pagesize", value = n)        
        bot.send_message(id, "–¢–µ–∫—É—â–∏–π —Ä–∞–∑–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã " + str(n) + " —Å–∏–º–≤–æ–ª–æ–≤")

def set_page_by_phrase(message):
    id = message.chat.id
    isOpen, pos, shift, freq = sql.get_data(id)
    
    if isOpen == 1:     
        w = (message.text).lower()

        if len(w) > 1:    
            path = tools.get_current_path(id)
            book = tools.get_book(path)
            lc = book.lower()
            pos = lc.find(w)
            
            if pos == -1:
                #if user.language_code == "ru":
                    bot.send_message(id, "–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
                #else:
                    #bot.send_message(id, "Not found")                  
            else:  
                size_N = len(book)
                read = tools.how_much_read(pos, size_N, shift)
                end_pos = pos + shift
                text = book[pos: end_pos] + "\n" + read
                bot.send_message(id, text)
                sql.update(id = id, field = "position", value = end_pos)   
    
def show_state(message):
    id = message.chat.id
    isOpen, pos, shift, freq = sql.get_data(id)
    if isOpen == 1:
        path = tools.get_current_path(id)
        book = tools.get_book(path)        
        size_N = len(book)
        per = pos/size_N*100

        pages_read = tools.how_much_read(pos, size_N, shift)
        percent = tools.how_much_percent_read(pos, size_N)
        
        bot.send_message(id, "–ü—Ä–æ—á–∏—Ç–∞–Ω–æ: " + percent + " %, –∏–ª–∏ " + pages_read + " —Å—Ç—Ä.")
        #if user.language_code == "ru":
        #   bot.send_message(id, "–ü—Ä–æ—á–∏—Ç–∞–Ω–æ: " + percent + " %, –∏–ª–∏ " + pages_read + " —Å—Ç—Ä.")
        #else:
        #    bot.send_message(id, "Finished: " + percent + " %, or " + pages_read + " pp.")
        
    else:
        bot.send_message(id, "–í—ã –µ—â–µ –Ω–µ –∑–∞–≥—Ä—É–∑–∏–ª–∏ —Ñ–∞–π–ª")

def user_not_found(user, id):
    if not(id in userlist):
        if user.language_code == "ru":
            bot.send_message(id, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏–µ /start –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏")
        else:
            bot.send_message(id, "User not found, Please enter /start for initialization")
        return True
    else:
        return False 
 
bot.infinity_polling(timeout = 10001)





