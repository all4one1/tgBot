# TODO:
#   examples
#   check if non active
#   refactoring

import telebot
import os
import reminder
import book_parser
import tools
import sql
import urllib.request
from telebot import types
from threading import Thread

print("start")
tools.init()
TOKEN = tools.get_token()
bot = telebot.TeleBot(TOKEN, parse_mode="HTML")
userlist = sql.get_user_id_list()
bot_info = bot.get_me()


@bot.message_handler(commands=["debug"])
def response(message):
    user = message.from_user
    id = user.id
    res = str(list(sql.get_data(id)))
    s = ' '.join(res)
    bot.reply_to(message, s)


@bot.message_handler(commands=["check"])
def response(message):
    lang = message.from_user.language_code
    ru, eng = "–ë–æ—Ç –≤–∫–ª—é—á–µ–Ω", "Bot is on"
    bot.reply_to(message, {True: ru, False: eng}[lang == 'ru'])
    id = message.chat.id
    chat = bot.get_chat(id)
    user = message.from_user
    bot.send_message(id, user.language_code)
    sql.update_text(id, field='language', value=lang)


@bot.message_handler(commands=["start"])
def beginning(message):
    user = message.from_user
    id = user.id

    # main buttons
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    if user.language_code == "ru":
        button_next = types.KeyboardButton("‚è© –î–∞–ª–µ–µ")
        button_menu = types.KeyboardButton("üìò –ú–µ–Ω—é")
    else:
        button_next = types.KeyboardButton("‚è© Next")
        button_menu = types.KeyboardButton("üìò Menu")
    markup.add(button_menu, button_next)

    # greeting message
    if user.language_code == "ru":
        bot.send_message(id, "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π, –¥–æ—Ä–æ–≥–æ–π –¥—Ä—É–≥. –ó–∞–≥—Ä—É–∑–∏ *.txt —Ñ–∞–π–ª, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å", reply_markup=markup)
    else:
        bot.send_message(id, "Hello, dear friend. Upload a *.txt file to get started", reply_markup=markup)

    isNew = not (id in userlist)
    if isNew:
        folder = os.path.join("User", str(id))
        if not os.path.exists(folder):
            os.makedirs(folder)
        sql.add_new_user(id)
        userlist.append(id)
        tools.log("user " + str(id) + " has been created")

        f = open((os.path.join(folder, "userinfo.txt")), "w")
        f.write("First name: " + str(user.first_name) + "\n")
        f.write("Last name: " + str(user.last_name) + "\n")
        f.write("username: " + str(user.username) + "\n")
        f.close()

    sql.update_text(id, field='language', value=user.language_code)


@bot.message_handler(commands=["next"])
def next_page(message):
    user = message.from_user
    id = user.id
    if user_not_found(user, id):
        return

    text = book_parser.next_page(id)
    bot.send_message(id, text)


@bot.message_handler(content_types=["document"])
def obtained(message):
    user = message.from_user
    id = user.id

    isNew = not (id in userlist)
    if isNew == True:
        bot.send_message(id, "Error, you have not /started")

    # bot.reply_to(message, message.document)
    doc = message.document
    file = bot.get_file(doc.file_id)
    link = 'https://api.telegram.org/file/bot' + TOKEN + '/' + file.file_path
    file_name = str(doc.file_name)
    current_path = tools.get_current_path(id)
    response = urllib.request.urlretrieve(link, current_path)
    f = open(current_path, "r")
    if f.readable() == True:
        bot.reply_to(message, "file has been received")
        sql.update(id=id, field='isOpen', value=1)
        sql.update(id=id, field='position', value=0)


@bot.message_handler(commands=["help"])
def get_help(message, language_code='ru'):
    id = message.chat.id
    text = ""
    if language_code == 'ru':
        text = '''–≠—Ç–æ –±–æ—Ç-—á–∏—Ç–∞–ª–∫–∞. –°–∞–º –∑–∞ —Ç–µ–±—è —á–∏—Ç–∞—Ç—å –æ–Ω –Ω–µ –±—É–¥–µ—Ç. –ï—Å—Ç—å –∫–∞–∫–∏–µ-—Ç–æ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è, —á—Ç–æ —á–∏—Ç–∞—Ç—å –±–æ–ª—å—à–∏–µ –∫–Ω–∏–≥–∏ - —Ç—è–∂–µ–ª–æ. –ù–æ –∫–æ–≥–¥–∞ –∫–Ω–∏–∂–∫–∞ —Ä–∞–∑–±–∏—Ç–∞ –Ω–∞ –º–µ–ª–∫–∏–µ —Ñ—Ä–∞–≥–º–µ—Ç—ã - —Ç–æ—Ç –∂–µ —Å–∞–º—ã–π –æ–±—ä–µ–º —Ç–µ–∫—Å—Ç–∞ –ø–æ —á–∞—Å—Ç—è–º "–ø–æ–≥–ª–æ—â–∞–µ—Ç—Å—è" –≤ —Ä–∞–∑—ã –±—ã—Å—Ç—Ä–µ–µ. 
–ê –µ—â–µ, –≤ —Ç–µ–ª–µ–≥—Ä–∞–º –º–Ω–æ–≥–∏–µ –∑–∞—Ö–æ–¥—è—Ç –ø–æ –≤—Å—è–∫–æ–π –µ—Ä—É–Ω–¥–µ, –ª–∏—Å—Ç–∞—è (–ø–æ –±–æ–ª—å—à–æ–º—É —Å—á–µ—Ç—É) –±–µ—Å–ø–æ–ª–µ–∑–Ω—É—é –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—É—é –ª–µ–Ω—Ç—É. –ê —Ç–∞–∫ –≥–ª—è–¥–∏—à—å –∏ –∫–Ω–∏–∂–∫—É –∫–∞–∫—É—é —É–º–Ω—É—é –º–∏–º–æ —Ö–æ–¥–æ–º –æ—Å–∏–ª–∏—à—å (–ø—É—Å–∫–∞–π –∏ –Ω–µ –±—ã—Å—Ç—Ä–æ).
–ï—Å–ª–∏ –≤—ã –µ—â–µ —Ç–æ–≥–æ –Ω–µ —Å–¥–µ–ª–∞–ª–∏, –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ó–∞—Ç–µ–º –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª –≤ —Ñ–æ—Ä–º–∞—Ç–µ *.txt.
–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–î–∞–ª–µ–µ" –¥–ª—è –ø–µ—Ä–µ–ª–∏—Å—Ç—ã–≤–∞–Ω–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü. –í –º–µ–Ω—é –º–æ–∂–Ω–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å —Ä–∞–∑–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã, –Ω–æ –Ω–µ –±–æ–ª–µ–µ 4000 —Å–∏–º–≤–æ–ª–æ–≤ (–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –¢–µ–ª–µ–≥—Ä–∞–º–∞)
–í—Å–µ –ø—Ä–µ—Ç–µ–Ω–∑–∏–∏ –ø—Ä–∏—Å—ã–ª–∞–π—Ç–µ –Ω–∞ –∞–¥—Ä–µ—Å: ¬´–°–ø–æ—Ä—Ç–ª–æ—Ç–æ¬ª: 109316, –ú–æ—Å–∫–≤–∞, –í–æ–ª–≥–æ–≥—Ä–∞–¥—Å–∫–∏–π –ø—Ä–æ—Å–ø–µ–∫—Ç, –¥. 43, –∫–æ—Ä–ø. 3
'''
    else:
        text = ''' upload *.txt file to start
                '''
    bot.send_message(id, text)


@bot.message_handler(content_types=["text"])
def inline_buttons(message):
    user = message.from_user
    id = user.id
    lang = user.language_code
    if user_not_found(user, id):
        return
    isOpen, pos, shift, freq = sql.get_data(id)

    my_text = message.text
    split_text = my_text.split(" ")

    menu_list = ["–ú–µ–Ω—é", "–º–µ–Ω—é", "Menu", "menu"]
    if any(x in split_text for x in menu_list):
        if lang == 'ru':
            imarkup = types.InlineKeyboardMarkup(row_width=1)
            b1 = types.InlineKeyboardButton("–ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É", callback_data="page_number")
            b2 = types.InlineKeyboardButton("–ò–∑–º–µ–Ω–∏—Ç—å —Ä–∞–∑–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã.", callback_data="page_size")
            b3 = types.InlineKeyboardButton("–ù–∞–π—Ç–∏ —Ñ—Ä–∞–∑—É", callback_data="find_phrase")
            b4 = types.InlineKeyboardButton("–ü—Ä–æ–≥—Ä–µ—Å—Å", callback_data="state")
            b5 = types.InlineKeyboardButton("–ü–æ–º–æ—â—å", callback_data="help")
            b6 = types.InlineKeyboardButton("Switch on reminder", callback_data="reminder")
            imarkup.add(b1, b2, b3, b4, b5, b6)
            bot.send_message(id, "–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —á–∏—Ç–∞–ª–∫–∏", parse_mode='HTML', reply_markup=imarkup)
        else:
            imarkup = types.InlineKeyboardMarkup(row_width=1)
            b1 = types.InlineKeyboardButton("Change page number", callback_data="page_number")
            b2 = types.InlineKeyboardButton("Change page size", callback_data="page_size")
            b3 = types.InlineKeyboardButton("Looking for a phrase", callback_data="find_phrase")
            b4 = types.InlineKeyboardButton("Progress", callback_data="state")
            b5 = types.InlineKeyboardButton("Help", callback_data="help")
            b6 = types.InlineKeyboardButton("Switch on reminder", callback_data="reminder")
            imarkup.add(b1, b2, b3, b4, b5, b6)
            bot.send_message(id, "What I can do", parse_mode='HTML', reply_markup=imarkup)

    next_list = ["–î–∞–ª–µ–µ", "–¥–∞–ª–µ–µ", "Next", "next"]
    if any(x in split_text for x in next_list):
        next_page(message)


def set_page_number(message):
    id = message.chat.id
    input = message.text
    text = book_parser.set_page_number(id, input)
    bot.send_message(id, text)


def set_page_size(message):
    id = message.chat.id
    input = message.text
    text = book_parser.set_page_size(id, input)
    bot.send_message(id, text)


def set_page_by_phrase(message):
    id = message.chat.id
    phrase = message.text
    text = book_parser.set_page_by_phrase(id, phrase)
    bot.send_message(id, text)


def show_state(message):
    id = message.chat.id
    text = book_parser.show_state(id)
    bot.send_message(id, text)


@bot.callback_query_handler(func=lambda call: True)
def callback_handler(call):
    id = call.message.chat.id
    mes = call.message
    lang = call.from_user
    command = call.data.split()

    if call.data == 'page_number':
        ru, eng = "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã", "Enter the page number"
        bot.send_message(id, {True: ru, False: eng}[lang == 'ru'])
        bot.register_next_step_handler(mes, set_page_number)
    if call.data == 'page_size':
        ru, eng = "–í–≤–µ–¥–∏ —Ä–∞–∑–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã –≤ —Å–∏–º–≤–æ–ª–∞—Ö, –Ω–µ –±–æ–ª–µ–µ 4000", "Enter the page size, not more 4000 symbols"
        bot.send_message(id, {True: ru, False: eng}[lang == 'ru'])
        bot.register_next_step_handler(mes, set_page_size)
    if call.data == 'find_phrase':
        ru, eng = "–í–≤–µ–¥–∏—Ç–µ –∏—Å–∫–æ–º—É—é —Ñ—Ä–∞–∑—É", "Enter the phrase to look for"
        bot.send_message(id, {True: ru, False: eng}[lang == 'ru'])
        bot.register_next_step_handler(mes, set_page_by_phrase)
    if call.data == "state":
        show_state(mes)
    if call.data == "help":
        get_help(mes)
    if call.data == "reminder":
        reminder.set_reminder(bot, mes)

    if len(command) > 1:
        if command[0] == "freq":
            freq = int(command[1])
            sql.update(id, field='frequency', value=freq)
            bot.send_message(id, "frequency set to " + str(freq) + " seconds")


def user_not_found(user, id):
    if not (id in userlist):
        if user.language_code == "ru":
            bot.send_message(id, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏–µ /start –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏")
        else:
            bot.send_message(id, "User not found, Please enter /start for initialization")
        return True
    else:
        return False


print("new thread")
thread = Thread(target=reminder.start, args=[bot])
thread.start()


print("polling")
bot.infinity_polling(timeout=10001)
